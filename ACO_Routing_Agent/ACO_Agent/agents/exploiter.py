import logging
import json5
from typing import List, Dict, Any
from agents.base import LLMBaseAgent
from utils.helpers import clean_response

class ExploiterAgent(LLMBaseAgent):
    def refine(self, evaluated_candidates: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        prompt = (
            "Role: Exploiter.\n"
            "Task: For the given evaluated candidate solutions (a JSON array), return a JSON array "
            "of objects where each object includes the 'candidate' field and a new field 'refined_score' (a numeric value).\n"
            f"Input: {json5.dumps(evaluated_candidates)}\n"
            "Return only valid JSON with no additional commentary."
        )
        response = self._llm_call(prompt, temperature=0.7)
        cleaned = clean_response(response)
        if not cleaned.startswith('['):
            cleaned = f"[{cleaned}]"
        try:
            refined = json5.loads(cleaned)
            if not isinstance(refined, list):
                raise ValueError("Response is not a JSON array.")
            logging.info(f"Exploiter refined candidates: {refined}")
            return refined
        except Exception as e:
            logging.error(f"Exploiter parsing error. Raw response: {response}\nCleaned response: {cleaned}\nException: {e}")
            raise
